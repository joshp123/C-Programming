/*

Project A: Quadratic Equation solver

Only 10 times shittier and more annoying than using python!

*/

#include <stdio.h>
#include <math.h>

typedef struct {
	float re;
	float im;
} complex;

complex croot(float x){ // function to calculate the sqrt of both positive and negative numbers
	complex root;
	if(x < 0){
		root.im = sqrt(fabs(x));
		root.re = 0;
	}
	else{
		root.re = sqrt(x);
		root.im = 0;
	}
return root;
}

float getfloat(float a){
	printf("%f\n",a);
	int success;
	printf("hi\n");
	float input;
	while(success == 0){
		printf("gbs555\n");
		scanf("%f", &input);
		if(input != 0){ //confirm it's actually a float
			printf("%f \n", input);
			success = 1;
			break;
		}
	}
	return input;
}

int quadratic(float a, float b, float c){
	complex result,descr_root,root1,root2; //luv2declarevariables (not)
	float descr;
	int compl,distinct,s;
	s = 1;
	printf("\nComputing roots of %.2f x\375 + %.2f x + %.2f = 0\n\n",a,b,c); // i could make this pretty and display + 5x and -5x correctly instead of + -5.00 but that would take forever 																				because lol c sucks at concentating strings. totally not worth the effort

	descr = (b*b)- 4*a*c; // calculate discriminant
	
	if(descr == 0){
		s = 2;			// s is used to distinguish between the 3 cases: 2 real roots (discriminant +ve), 1 distinct root (discriminant = 0), 2 complex roots, (discriminant -ve). These are 					given by s = 1,2 and 3 respectively
	}
	else if(descr < 0){
		s = 3;
	}
	descr_root = croot(descr); // get sqrt(b^2 - 4ac) but complex
	root1.re = ((-1*b) + descr_root.re)/(2*a);
	root1.im = (descr_root.im)/(2*a);
	root2.re = ((-1*b) - descr_root.re)/(2*a);
	root2.im = (descr_root.im)/(2*a);
	switch(s) {
		case 1:
			printf("There are 2 distinct, real roots. They are:\n\n\tx = %.2f\n\nand\n\n\tx = %.2f\n",root1.re,root2.re);
			break;
		case 2:
			printf("There is one distinct root. It is:\n\n\tx = %.2f\n",root1.re);
			break;
		case 3:
			printf("There are 2 distinct, complex roots. They are:\n\n\tx = %.2f + %.2f i \n\nand\n\n\tx = %.2f + %.2f i\n",root1.re,root1.im,root2.re,root2.im);
			break;
	}
	return 0;
}

int main(){
	float a,b,c;
	printf("Enter the quadratic coefficient:\n");
	a = getfloat(a);
	printf("\nEnter the linear coefficient:\n");
	b = getfloat(b);
	printf("\nEnter the constant term:\n");
	c = getfloat(c);
	quadratic(a,b,c);
	return 0;
}
